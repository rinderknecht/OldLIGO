#import "TacoShop.jsligo" "TacoShop"

function assert_string_failure (res: test_exec_result, expected: string) {
  const expected_bis = Test.eval(expected);
  match(res, {
    Fail: (x) =>
      match(x, {
        Rejected: (y) =>
          assert(Test.michelson_equal(y[0], expected_bis));
        Balance_too_low: (_) =>
          failwith("contract failed for an unknown reason");
        Other: (_o) =>
          failwith("contract failed for an unknown reason")
      });
    Success: (_s) =>
      failwith("bad price check")
  });
}

const test = (
  (_u: unit): unit => {
      /* Originate the contract with a initial storage */

      let init_storage =
        Map.literal(
          list(
            [
              [abs(1), { current_stock: abs(50), max_price: 50000000 as mutez }],
              [abs(2), { current_stock: abs(20), max_price: 75000000 as mutez }]
            ]
          )
        );
      const { addr , code , size } =
        Test.originate(contract_of(TacoShop), init_storage, 0 as mutez);

      /* Test inputs */

      const clasico_kind : parameter_of<TacoShop.TacoShop> = Buy_taco (abs(1));
      const unknown_kind : parameter_of<TacoShop.TacoShop> = Buy_taco (abs(3));
      /* Auxiliary function for testing equality in maps */

      const eq_in_map = (r: TacoShop.taco_supply, m: TacoShop.taco_shop_storage, k: nat) =>
        match(Map.find_opt(k, m), {
          None: () => false;
          Some: (v) =>
            v.current_stock == r.current_stock && v.max_price == r.max_price
        });
      /* Purchasing a Taco with 1 tez and checking that the stock has been updated */

      const ok_case: test_exec_result =
        Test.transfer(
          addr,
          clasico_kind,
          (1000000 as mutez)
        );

        match(ok_case, {
          Success: (_s) =>
            (() => {
              let storage = Test.get_storage(addr);
              assert(
                eq_in_map(
                  { current_stock: abs(49), max_price: 50000000 as mutez },
                  storage,
                  abs(1)
                )
                && eq_in_map(
                     { current_stock: abs(20), max_price: 75000000 as mutez },
                     storage,
                     abs(2)
                   )
              );
            })();
          Fail: (_e) =>
            failwith("ok test case failed")
        });
      /* Purchasing an unregistred Taco */

      const nok_unknown_kind =
        Test.transfer(
          addr,
          unknown_kind,
          (1000000 as mutez)
        );
      assert_string_failure(nok_unknown_kind, "Unknown kind of taco");
      /* Attempting to Purchase a Taco with 2 tez */

      const nok_wrong_price =
        Test.transfer(
          addr,
          clasico_kind,
          (2000000 as mutez)
        );

        assert_string_failure(
          nok_wrong_price,
          "Sorry, the taco you are trying to purchase has a different price"
        );
      return unit
    }
  ) ();
